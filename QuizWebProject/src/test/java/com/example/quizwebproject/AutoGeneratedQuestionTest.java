package com.example.quizwebproject;

import com.example.quizwebproject.model.questions.AutoGeneratedQuestion;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class AutoGeneratedQuestionTest {

    private AutoGeneratedQuestion questionDefault;
    private AutoGeneratedQuestion questionRange;

    @BeforeEach
    void setUp() {
        questionDefault = new AutoGeneratedQuestion();
        questionRange = new AutoGeneratedQuestion(5, 15);
    }

    @Test
    void testCategoryIsAutoGenerated() {
        assertEquals("AutoGenerated", questionDefault.getCategory());
        assertEquals("AutoGenerated", questionRange.getCategory());
    }

    @Test
    void testQuestionFormat() {
        String questionText = questionDefault.getQuestion();
        assertTrue(questionText.matches("What is \\d+ [\\+\\-\\*] \\d\\?"), "Unexpected format: " + questionText);
    }

    @Test
    void testCorrectAnswerCalculation() {
        String questionText = questionDefault.getQuestion();
        String[] parts = questionText.split(" ");
        int op1 = Integer.parseInt(parts[2]);
        char operator = parts[3].charAt(0);
        int op2 = Integer.parseInt(parts[4].replace("?", ""));

        int expected = switch (operator) {
            case '+' -> op1 + op2;
            case '-' -> op1 - op2;
            case '*' -> op1 * op2;
            default -> throw new IllegalArgumentException("Unexpected operator: " + operator);
        };

        assertEquals(String.valueOf(expected), questionDefault.getCorrectAnswers().get(0));
    }

    @Test
    void testUserAnswerCorrectness() {
        String correct = questionDefault.getCorrectAnswers().get(0);
        questionDefault.setUserAnswer(correct);
        assertEquals(100.0, questionDefault.getResult());

        questionDefault.setUserAnswer("wrong answer");
        assertEquals(0.0, questionDefault.getResult());
    }

    @Test
    void testMaxPoints() {
        questionDefault.setMaxPoints(50.0);
        assertEquals(50.0, questionDefault.getMaxPoints());
    }

    @Test
    void testToStringIncludesKeyDetails() {
        String str = questionDefault.toString();
        assertTrue(str.contains("AutoGeneratedQuestion {"));
        assertTrue(str.contains("question='"));
        assertTrue(str.contains("correctAnswer='"));
        assertTrue(str.contains("userAnswer='"));
        assertTrue(str.contains("result="));
        assertTrue(str.contains("category='AutoGenerated'"));
    }

    @RepeatedTest(5)
    void testGeneratedOperandsWithinRange() {
        AutoGeneratedQuestion q = new AutoGeneratedQuestion(5, 10);
        String questionText = q.getQuestion();
        String[] parts = questionText.split(" ");
        int op1 = Integer.parseInt(parts[2]);
        int op2 = Integer.parseInt(parts[4].replace("?", ""));
        assertTrue(op1 >= 5 && op1 <= 10);
        assertTrue(op2 >= 5 && op2 <= 10);
    }
}
